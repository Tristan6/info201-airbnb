str <- paste("Of the", class, "class,", percent.men.survival,
"% of men survived and", percent.wo.chil.survival,
"% of women and children survived.")
# Return to caller.
return(str)
}
# Call 'SurvivalRate()' function on each of the ticketing classes (1st, 2nd, and 3rd), printing
# out the results. Then in the Assignment.R file, add a comment that answers the following question
# in a few sentences:
print(SurvivalRate('1st'))
print(SurvivalRate('2nd'))
print(SurvivalRate('3rd'))
# From the data, it is clear that women and children were disproportionately across three class.
# Women and children from the 1st class has higher the survival rate of 97%; on the other hand
# women and children on the 3rd class only have 42%.So, class was a big factor in determining
# who live and who die.
install.packages("nycflights13")# load librarylibrary("nycflights13")# inspect the `flights` data frameView(head(flights))
# load library
library("nycflights13")
# inspect the `flights` data frame
View(head(flights))
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(head(flights))
colnames(head(flights))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
is.data.frame(head(flights))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
air.time <- select(head(flights), air.time)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library('dplyr')
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
air.time <- select(head(flights), air.time)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
air.time <- select(head(flights), air_time)
air.time
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
air.time <- arrange(air.time, -air_tiem)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
air.time <- arrange(air.time, -air_time)
air.time
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables and reload the library
# to "reset" it.
air.time <- arrange(select(head(flights), air_time), -air_time)
air.time
# Make a histogram of the amount of time gained using the `hist()` function
hist(air.time)
?hist
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
flights <- mutate(flights, gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
time.gained <- arrange(flights, -gained)
time.gained
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
flights <- mutate(flights, gained = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flight$gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gained)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean = mean(gained, na.rm =TRUE))
# Make a data.frame
students <- data.frame(
name = c('Mason', 'Tabi', 'Bryce', 'Ada', 'Bob','Filipe'),
section = c('a','a','a','b','b','b'),
math_exam1 = c(91, 82, 93, 100, 78, 91),
math_exam2 = c(88, 79, 77, 99, 88, 93),
spanish_exam1 = c(79, 88, 92, 83, 87, 77),
spanish_exam2 = c(99, 92, 92, 82, 85, 95))
# Calculate summary stats
summarize(students,
mean_math1 = mean(math_exam1),
mean_math2 = mean(math_exam2),
mean_math_scores=mean((math_exam1 + math_exam2) / 2))
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# What was the average department delay in each month?
# Save this as a data frame `dep.delay.by.month`
# Hint: you'll have to perform a grouping operation before summarizing your data
View(flights)
dep.delay.by.month <- group_by(flights, month) %>% summarize(average = average(dep_delay))
?average
??average
dep.delay.by.month <- group_by(flights, month) %>% summarize(average = sum(dep_delay) / nrow(month))
dep.delay.by.month <- group_by(flights, month) %>% summarize(average = mean(dep_delay))
dep.delay.by.month
# Which month had the greatest average departure delay?
num.max <- filter(dep.delay.by.month, max(average))
# Which month had the greatest average departure delay?
num.max <- filter(dep.delay.by.month, max(month))
dep.delay.by.month <- group_by(flights, month) %>% summarize(mean = mean(dep_delay))
dep.delay.by.month
# Which month had the greatest average departure delay?
num.max <- filter(filghts, max(month))
# Which month had the greatest average departure delay?
num.max <- filter(flights, max(month))
dep.delay.by.month <- group_by(flights, month) %>% summarize(mean = mean(dep_delay, na.rm = TRUE))
dep.delay.by.month
# Which month had the greatest average departure delay?
num.max <- filter(flights, max(month))
# Which month had the greatest average departure delay?
num.max <- filter(dep.delay.by.month, mean == max(mean))
num.max
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
View(airports)
arrival.delay <- select(flights, arr_delay, dest)
arrival.delay
left_join(airports, arrival.delay)
left_join(airports, arrival.delay, by = c('faa' = 'dest'))
airports
arrival.delay <- select(flights, arr_delay)
arrival.delay
install.packages('httr')
library('httr')
query.params <- list(q = "informatics")
GET("https://www.google.com/search", query = query.params)
install.packages('jsonlite')
library('jsonlite')
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library('httr')
library('dplyr')
library('jsonlite')
# Create a variable for the API's base URI (https://api.github.com)
git.base <- "http://api.github.com"
# Under the "Repositories" category, find the endpoint that will list repos in
# an organization
# Create a variable `resource` that represents the endpoint for the course
# organization (you can use `paste0()` to construct this, or enter it manually)
resource <- paste0('/repositories', '/org')
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
reponse <- GET(git.base, resource)
reponse
# Under the "Repositories" category, find the endpoint that will list repos in
# an organization
# Create a variable `resource` that represents the endpoint for the course
# organization (you can use `paste0()` to construct this, or enter it manually)
resource <- paste0('/repositories')
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
reponse <- GET(git.base, resource)
reponse
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
reponse <- GET(paste0(git.base, resource))
reponse
# Under the "Repositories" category, find the endpoint that will list repos in
# an organization
# Create a variable `resource` that represents the endpoint for the course
# organization (you can use `paste0()` to construct this, or enter it manually)
resource <- '/repositories'
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
reponse <- GET(paste0(git.base, resource))
install.packages('shiny')
library('shiny')
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
h1('Hello Shiny'),
textInput('user.name', label = 'What is your name')
)
my.server <- function(input, output) {
}
shinyApp(ui = my.ui, server = my.server)
runApp('C:/Users/Jimmy/infor201')
runApp('C:/Users/Jimmy/infor201')
runApp('C:/Users/Jimmy/infor201')
my.server <- function(input, output) {
output$greeting <- renderText({
my.message <- paste('Hello', input$user.name)
return(my.message)
})
}
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
h1('Hello Shiny'),
textInput('user.name', label = 'What is your name'),
textOutput('greeting')
)
my.server <- function(input, output) {
output$greeting <- renderText({
my.message <- paste('Hello', input$user.name)
return(my.message)
})
}
shinyApp(ui = my.ui, server = my.server)
# Install and load the `shiny` package
# install.packages("shiny")
library('shiny')
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
my.ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel('Cost Calculator'),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput('price', label = 'Price (in dollars', value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput('quantity', label = 'Quantity', value = 1, min = 1),
# The word "Cost", strongly bolded
strong('Cost'),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput('message')
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my.server <- function(input, output) {
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$message <- renderText({
calculation <- input$price * input$quantity
return(paste('$', calculation))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my.ui, server = my.server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='tran6388', token='05E2579C65CEED44E1345FF4A850EEAE', secret='KcNsS3dmCNzom1RcFnOpJZRmtPPj5v9dN+D1kNIE')
rsconnect::setAccountInfo(name='tran6388', token='05E2579C65CEED44E1345FF4A850EEAE', secret='KcNsS3dmCNzom1RcFnOpJZRmtPPj5v9dN+D1kNIE')
library('shiny')
install.packages('rsconnect')
library('rsconnect')
install.packages("rsconnect")
my.ui <- fluidPage(
h1('Hello Shiny'),
textInput('user.name', label = 'What is your name'),
textOutput('greeting')
)
my.server <- function(input, output) {
output$greeting <- renderText({
my.message <- paste('Hello', input$user.name)
return(my.message)
})
}
shinyApp(ui = my.ui, server = my.server)
world.map$CO2_emissions_(kt)
max(diamonds$price)
View(diamonds)
cars
is.data.frame(cars)
max(cars$dist)
ls
ls <- c(1:20)
ls
ls <- factor(ls)
ls
ls[1]
is.vector(ls)
ls[1]+1
ls <- c(1:20)
ls
lss <- cut(ls, breaks = c(0,5))
lss
lss <- cut(ls, breaks = c(0,5,10,20))
lss
lss[1]
is.vector(lss)
is.factor(lss)
is.vector(lss[1])
is.vector(lss[0:5])
lss[0:5]
lss
lss
ls <- table(lss)
ls
is.data.frame(ls)
is.vector(ls)
ls[1]
ls[2]
isClass(ls)
getClass(ls)
print(lss)
print(ls)
?table
ls <- data.frame(ls)
ls
shiny::runApp('C:/Users/Jimmy/infor201/info201-airbnb')
shiny::runApp('C:/Users/Jimmy/infor201/info201-airbnb')
shiny::runApp('C:/Users/Jimmy/infor201/info201-airbnb')
setwd("C:/Users/Jimmy/infor201/info201-airbnb")
runApp()
runApp()
?addCircles
runApp()
runApp()
runApp()
runApp()
?addCircleMarkers
runApp()
runApp()
runApp()
runApp()
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE)
)
library(leaflet)
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE)
)
?addPopups
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = TRUE)
)
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE)
)
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content
)
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content
)
library(sp)
library(leaflet)
circleFun <- function(center = c(0,0),diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
Sr1 = Polygon(cbind(xx, yy))
Srs1 = Polygons(list(Sr1), "s1")
SpP = SpatialPolygons(list(Srs1), 1:1)
return(SpP)
}
circleFun <- function(center = c(0,0),diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
Sr1 = Polygon(cbind(xx, yy))
Srs1 = Polygons(list(Sr1), "s1")
SpP = SpatialPolygons(list(Srs1), 1:1)
return(SpP)
}
Circle.Town <- circleFun(c(1,-1),2.3,npoints = 100)
df1 <- data.frame(long=c(0.6,1,1.4), lat=c(-2, -.8, -0.2), other=c('a', 'b', 'c'), VAM=c(10,8,6),
type=c('Public', 'Public', 'Private'), id=c(1:3)) %>%
mutate(X=paste0('<strong>id: </strong>',
id,
'<br><strong>type</strong>: ',
type,
'<br><strong>VAM</strong>: ',
VAM))
# Create a continuous palette function
pal <- colorNumeric(
palette = "RdYlBu",
domain = df1$VAM
)
leaflet(height = "400px") %>%
addTiles() %>%
addPolygons(data = Circle.Town, color = 'green',  fillOpacity = .7) %>%
addCircleMarkers(data = df1, lat = ~lat, lng =~long,
radius = ~VAM, popup = ~as.character(X),
fillColor = ~pal(VAM),
stroke = FALSE, fillOpacity = 0.8,
clusterOptions = markerClusterOptions()) %>%
addLegend(position = "topright",
pal = pal, values = df1$VAM,
title = "VAM",
opacity = 1
) %>%
setView(lng = 1, lat = -1, zoom = 8)
runApp()
runApp()
GetFrame <- function(city, year) {
path.now <- paste0('data/', city, '/' , 'airbnb-', year, '.csv')
show.frame <- read.csv(file = path.now, stringsAsFactors = FALSE)
return(show.frame)
}
show.frame <- GetFrame('chicago',2015)
View(show.frame)
?addCircleMarkers
library(sp)
library(leaflet)
circleFun <- function(center = c(0,0),diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
Sr1 = Polygon(cbind(xx, yy))
Srs1 = Polygons(list(Sr1), "s1")
SpP = SpatialPolygons(list(Srs1), 1:1)
return(SpP)
}
Circle.Town <- circleFun(c(1,-1),2.3,npoints = 100)
df1 <- data.frame(long=c(0.6,1,1.4), lat=c(-2, -.8, -0.2), other=c('a', 'b', 'c'), VAM=c(10,8,6),
type=c('Public', 'Public', 'Private'), id=c(1:3)) %>%
mutate(X=paste0('<strong>id: </strong>',
id,
'<br><strong>type</strong>: ',
type,
'<br><strong>VAM</strong>: ',
VAM))
# Create a continuous palette function
pal <- colorNumeric(
palette = "RdYlBu",
domain = df1$VAM
)
leaflet(height = "400px") %>%
addTiles() %>%
addPolygons(data = Circle.Town, color = 'green',  fillOpacity = .7) %>%
addCircleMarkers(data = df1, lat = ~lat, lng =~long,
radius = ~VAM, popup = ~as.character(X),
fillColor = ~pal(VAM),
stroke = FALSE, fillOpacity = 0.8,
clusterOptions = markerClusterOptions()) %>%
addLegend(position = "topright",
pal = pal, values = df1$VAM,
title = "VAM",
opacity = 1
) %>%
setView(lng = 1, lat = -1, zoom = 8)
?addCircles
show.frame2 <- show.frame %>% group_by(neighborhood) %>% mutate(n = n())
View(show.frame2)
show.frame2 <- show.frame %>% distinct(neighborhood)
show.frame3 <- GetFrame('new_york', 2015) %>% show.frame %>% distinct(neighborhood)
show.frame3 <- GetFrame('new_york', 2015) %>% distinct(neighborhood)
View(show.frame3)
runApp()
runApp()
runApp('C:/Users/Jimmy/infor201/a7-data-app-tran6388-1672747')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addTiles
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('test2.R')
install.packages('markdown')
install.packages("markdown")
library(shiny); runApp('test2.R')
runApp('test2.R')
runApp('test2.R')
runApp('test2.R')
runApp('test2.R')
runApp()
runApp('test2.R')
runApp()
runApp()
runApp()
?uiOutput
runApp('test2.R')
runApp('test2.R')
runApp('test2.R')
runApp('test2.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('test.R')
runApp('test.R')
runApp()
runApp()
runApp()
runApp()
runApp()
