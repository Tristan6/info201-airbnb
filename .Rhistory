# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean = mean(gained, na.rm =TRUE))
# Make a data.frame
students <- data.frame(
name = c('Mason', 'Tabi', 'Bryce', 'Ada', 'Bob','Filipe'),
section = c('a','a','a','b','b','b'),
math_exam1 = c(91, 82, 93, 100, 78, 91),
math_exam2 = c(88, 79, 77, 99, 88, 93),
spanish_exam1 = c(79, 88, 92, 83, 87, 77),
spanish_exam2 = c(99, 92, 92, 82, 85, 95))
# Calculate summary stats
summarize(students,
mean_math1 = mean(math_exam1),
mean_math2 = mean(math_exam2),
mean_math_scores=mean((math_exam1 + math_exam2) / 2))
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# What was the average department delay in each month?
# Save this as a data frame `dep.delay.by.month`
# Hint: you'll have to perform a grouping operation before summarizing your data
View(flights)
dep.delay.by.month <- group_by(flights, month) %>% summarize(average = average(dep_delay))
?average
??average
dep.delay.by.month <- group_by(flights, month) %>% summarize(average = sum(dep_delay) / nrow(month))
dep.delay.by.month <- group_by(flights, month) %>% summarize(average = mean(dep_delay))
dep.delay.by.month
# Which month had the greatest average departure delay?
num.max <- filter(dep.delay.by.month, max(average))
# Which month had the greatest average departure delay?
num.max <- filter(dep.delay.by.month, max(month))
dep.delay.by.month <- group_by(flights, month) %>% summarize(mean = mean(dep_delay))
dep.delay.by.month
# Which month had the greatest average departure delay?
num.max <- filter(filghts, max(month))
# Which month had the greatest average departure delay?
num.max <- filter(flights, max(month))
dep.delay.by.month <- group_by(flights, month) %>% summarize(mean = mean(dep_delay, na.rm = TRUE))
dep.delay.by.month
# Which month had the greatest average departure delay?
num.max <- filter(flights, max(month))
# Which month had the greatest average departure delay?
num.max <- filter(dep.delay.by.month, mean == max(mean))
num.max
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
View(airports)
arrival.delay <- select(flights, arr_delay, dest)
arrival.delay
left_join(airports, arrival.delay)
left_join(airports, arrival.delay, by = c('faa' = 'dest'))
airports
arrival.delay <- select(flights, arr_delay)
arrival.delay
install.packages('httr')
library('httr')
query.params <- list(q = "informatics")
GET("https://www.google.com/search", query = query.params)
install.packages('jsonlite')
library('jsonlite')
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library('httr')
library('dplyr')
library('jsonlite')
# Create a variable for the API's base URI (https://api.github.com)
git.base <- "http://api.github.com"
# Under the "Repositories" category, find the endpoint that will list repos in
# an organization
# Create a variable `resource` that represents the endpoint for the course
# organization (you can use `paste0()` to construct this, or enter it manually)
resource <- paste0('/repositories', '/org')
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
reponse <- GET(git.base, resource)
reponse
# Under the "Repositories" category, find the endpoint that will list repos in
# an organization
# Create a variable `resource` that represents the endpoint for the course
# organization (you can use `paste0()` to construct this, or enter it manually)
resource <- paste0('/repositories')
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
reponse <- GET(git.base, resource)
reponse
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
reponse <- GET(paste0(git.base, resource))
reponse
# Under the "Repositories" category, find the endpoint that will list repos in
# an organization
# Create a variable `resource` that represents the endpoint for the course
# organization (you can use `paste0()` to construct this, or enter it manually)
resource <- '/repositories'
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
reponse <- GET(paste0(git.base, resource))
install.packages('shiny')
library('shiny')
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
h1('Hello Shiny'),
textInput('user.name', label = 'What is your name')
)
my.server <- function(input, output) {
}
shinyApp(ui = my.ui, server = my.server)
runApp('C:/Users/Jimmy/infor201')
runApp('C:/Users/Jimmy/infor201')
runApp('C:/Users/Jimmy/infor201')
my.server <- function(input, output) {
output$greeting <- renderText({
my.message <- paste('Hello', input$user.name)
return(my.message)
})
}
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
h1('Hello Shiny'),
textInput('user.name', label = 'What is your name'),
textOutput('greeting')
)
my.server <- function(input, output) {
output$greeting <- renderText({
my.message <- paste('Hello', input$user.name)
return(my.message)
})
}
shinyApp(ui = my.ui, server = my.server)
# Install and load the `shiny` package
# install.packages("shiny")
library('shiny')
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
my.ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel('Cost Calculator'),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput('price', label = 'Price (in dollars', value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput('quantity', label = 'Quantity', value = 1, min = 1),
# The word "Cost", strongly bolded
strong('Cost'),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput('message')
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my.server <- function(input, output) {
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$message <- renderText({
calculation <- input$price * input$quantity
return(paste('$', calculation))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my.ui, server = my.server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='tran6388', token='05E2579C65CEED44E1345FF4A850EEAE', secret='KcNsS3dmCNzom1RcFnOpJZRmtPPj5v9dN+D1kNIE')
rsconnect::setAccountInfo(name='tran6388', token='05E2579C65CEED44E1345FF4A850EEAE', secret='KcNsS3dmCNzom1RcFnOpJZRmtPPj5v9dN+D1kNIE')
library('shiny')
install.packages('rsconnect')
library('rsconnect')
install.packages("rsconnect")
my.ui <- fluidPage(
h1('Hello Shiny'),
textInput('user.name', label = 'What is your name'),
textOutput('greeting')
)
my.server <- function(input, output) {
output$greeting <- renderText({
my.message <- paste('Hello', input$user.name)
return(my.message)
})
}
shinyApp(ui = my.ui, server = my.server)
world.map$CO2_emissions_(kt)
max(diamonds$price)
View(diamonds)
cars
is.data.frame(cars)
max(cars$dist)
ls
ls <- c(1:20)
ls
ls <- factor(ls)
ls
ls[1]
is.vector(ls)
ls[1]+1
ls <- c(1:20)
ls
lss <- cut(ls, breaks = c(0,5))
lss
lss <- cut(ls, breaks = c(0,5,10,20))
lss
lss[1]
is.vector(lss)
is.factor(lss)
is.vector(lss[1])
is.vector(lss[0:5])
lss[0:5]
lss
lss
ls <- table(lss)
ls
is.data.frame(ls)
is.vector(ls)
ls[1]
ls[2]
isClass(ls)
getClass(ls)
print(lss)
print(ls)
?table
ls <- data.frame(ls)
ls
shiny::runApp('C:/Users/Jimmy/infor201/info201-airbnb')
shiny::runApp('C:/Users/Jimmy/infor201/info201-airbnb')
GetFrame <- function(city, year) {
path.now <- paste0('./data', '/', city, '/' , year)
files <- list.files(path = path.now, pattern = '*airbnb')
num <- 2
show.frame <- read.csv(file = paste0(path.now, '/', files[1]), stringsAsFactors = FALSE)
while (num <= length(files)) {
now.frame <- read.csv(file = paste0(path.now, '/', files[num]), stringsAsFactors = FALSE)
show.frame <- rbind(show.frame, now.frame)
num <- num + 1
}
return(show.frame)
}
Show.frame <- GetFrame('chicago', 2015)
setwd("C:/Users/Jimmy/infor201/info201-airbnb")
Show.frame <- GetFrame('chicago', 2015)
View(Show.frame)
Show.frame2 <- filter(Show.frame, room_id == 970670)
Show.frame2 <- filter(Show.frame, room_id == 2384)
library('shiny')
library('ggplot2')
library('dplyr')
library('tidyr')
library('maps')
library('stringr')
library('leaflet')
Show.frame2 <- filter(Show.frame, room_id == 970670)
View(Show.frame2)
Show.frame2 <- filter(Show.frame, room_id == 2384)
Show.frame3 <- filter(Show.frame2, last_modified == max(last_modified))
View(Show.frame3)
View(Show.frame3)
?group_by
Show.frame2 <- group_by(show.frame, room_id) %>% filter(last_modified == max(last_modified))
View(Show.frame)
Show.frame2 <- group_by(show.frame, room_id) %>% filter(last_modified == max(last_modified))
Show.frame2 <- show.frame %>% group_by(room_id) %>% filter(last_modified == max(last_modified))
View(Show.frame)
library('shiny')
library('ggplot2')
library('dplyr')
library('tidyr')
library('maps')
library('stringr')
library('leaflet')
Show.frame2 <- group_by(show.frame, room_id) %>% filter(last_modified == max(last_modified))
GetFrame <- function(city, year) {
path.now <- paste0('./data', '/', city, '/' , year)
files <- list.files(path = path.now, pattern = '*airbnb')
num <- 2
show.frame <- read.csv(file = paste0(path.now, '/', files[1]), stringsAsFactors = FALSE)
while (num <= length(files)) {
now.frame <- read.csv(file = paste0(path.now, '/', files[num]), stringsAsFactors = FALSE)
show.frame <- rbind(show.frame, now.frame)
num <- num + 1
}
show.frame2 <- group_by(show.frame, room_id) %>%
filter(last_modified == max(last_modified))
return(show.frame2)
}
?ungroup
GetFrame <- function(city, year) {
path.now <- paste0('./data', '/', city, '/' , year)
files <- list.files(path = path.now, pattern = '*airbnb')
num <- 2
show.frame <- read.csv(file = paste0(path.now, '/', files[1]), stringsAsFactors = FALSE)
while (num <= length(files)) {
now.frame <- read.csv(file = paste0(path.now, '/', files[num]), stringsAsFactors = FALSE)
show.frame <- rbind(show.frame, now.frame)
num <- num + 1
}
show.frame2 <- group_by(show.frame, room_id) %>%
filter(last_modified == max(last_modified)) %>% ungroup()
return(show.frame2)
}
Show.frame2 <- GetFrame('chicago',2015)
write.csv()
?write.csv
setwd("C:/Users/Jimmy/infor201/info201-airbnb")
GetFrame <- function(city, year) {
path.now <- paste0('./data', '/', city, '/' , year)
files <- list.files(path = path.now, pattern = '*airbnb')
num <- 2
show.frame <- read.csv(file = paste0(path.now, '/', files[1]), stringsAsFactors = FALSE)
while (num <= length(files)) {
now.frame <- read.csv(file = paste0(path.now, '/', files[num]), stringsAsFactors = FALSE)
show.frame <- rbind(show.frame, now.frame)
num <- num + 1
}
show.frame2 <- group_by(show.frame, room_id) %>%
filter(last_modified == max(last_modified)) %>% ungroup()
write.csv(show.frame2, file = paste0("data_clean/"), city, "/airbnb-", year, "csv")
}
CreacteData <- function(frame) {
GetFrame('chicago', 2015)
}
CreacteData()
GetFrame <- function(city, year) {
path.now <- paste0('./data', '/', city, '/' , year)
files <- list.files(path = path.now, pattern = '*airbnb')
num <- 2
show.frame <- read.csv(file = paste0(path.now, '/', files[1]), stringsAsFactors = FALSE)
while (num <= length(files)) {
now.frame <- read.csv(file = paste0(path.now, '/', files[num]), stringsAsFactors = FALSE)
show.frame <- rbind(show.frame, now.frame)
num <- num + 1
}
show.frame2 <- group_by(show.frame, room_id) %>%
filter(last_modified == max(last_modified)) %>% ungroup()
write.csv(show.frame2, file = paste0("data_clean/"), city, "/airbnb-", year, ".csv")
}
CreacteData()
GetFrame <- function(city, year) {
path.now <- paste0('./data', '/', city, '/' , year)
files <- list.files(path = path.now, pattern = '*airbnb')
num <- 2
show.frame <- read.csv(file = paste0(path.now, '/', files[1]), stringsAsFactors = FALSE)
while (num <= length(files)) {
now.frame <- read.csv(file = paste0(path.now, '/', files[num]), stringsAsFactors = FALSE)
show.frame <- rbind(show.frame, now.frame)
num <- num + 1
}
show.frame2 <- group_by(show.frame, room_id) %>%
filter(last_modified == max(last_modified)) %>% ungroup()
address <-
write.csv(show.frame2, file = paste0("data_clean/", city, "/airbnb-", year, ".csv"))
}
CreacteData()
GetFrame <- function(city, year) {
path.now <- paste0('./data', '/', city, '/' , year)
files <- list.files(path = path.now, pattern = '*airbnb')
num <- 2
show.frame <- read.csv(file = paste0(path.now, '/', files[1]), stringsAsFactors = FALSE)
while (num <= length(files)) {
now.frame <- read.csv(file = paste0(path.now, '/', files[num]), stringsAsFactors = FALSE)
show.frame <- rbind(show.frame, now.frame)
num <- num + 1
}
show.frame2 <- group_by(show.frame, room_id) %>%
filter(last_modified == max(last_modified)) %>% ungroup()
write.csv(show.frame2, file = paste0("data_clean/", city, "/airbnb-", year, ".csv"))
}
CreacteData()
GetFrame <- function(city, year) {
path.now <- paste0('./data', '/', city, '/' , year)
files <- list.files(path = path.now, pattern = '*airbnb')
num <- 2
show.frame <- read.csv(file = paste0(path.now, '/', files[1]), stringsAsFactors = FALSE)
while (num <= length(files)) {
now.frame <- read.csv(file = paste0(path.now, '/', files[num]), stringsAsFactors = FALSE)
show.frame <- rbind(show.frame, now.frame)
num <- num + 1
}
show.frame2 <- group_by(show.frame, room_id) %>%
filter(last_modified == max(last_modified)) %>% ungroup()
write.csv(show.frame2, file = paste0("data/", city, "/airbnb-", year, ".csv"))
}
GetFrame('chicago',2015)
GetFrame('chicago',2016)
GetFrame('chicago',2017)
GetFrame('miami',2015)
GetFrame('miami',2016)
GetFrame('miami',2017)
GetFrame('miami',2015)
GetFrame('san_diego',2015)
GetFrame('san_diego',2016)
GetFrame('san_diego',2017)
GetFrame('new_york',2015)
GetFrame('new_york',2016)
GetFrame('new_york',2017)
GetFrame <- function(city, year) {
# path.now <- paste0('data', '/', city, '/' , year)
# files <- list.files(path = path.now, pattern = '*airbnb')
#
# num <- 2
# show.frame <- read.csv(file = paste0(path.now, '/', files[1]), stringsAsFactors = FALSE)
# while (num <= length(files)) {
#   now.frame <- read.csv(file = paste0(path.now, '/', files[num]), stringsAsFactors = FALSE)
#
#   show.frame <- rbind(show.frame, now.frame)
#
#   num <- num + 1
# }
path.now <- paste0('data', '/', city, '/' , 'airbnb-', year, '.csv')
show.frame <- read.csv(file = path.now, stringsAsFactors = FALSE)
return(show.frame)
}
show.frame <- GetFrame('chicago',2015)
View(show.frame)
source('pre-processing')
source('pre-processing.R')
runApp()
GetFrame <- function(city, year) {
path.now <- paste0('data', '/', city, '/' , 'airbnb-', year, '.csv')
show.frame <- read.csv(file = path.now, stringsAsFactors = FALSE)
return(show.frame)
}
Show.frame2 <- GetFrame('new_york', 2015)
Show.frame2 <- GetFrame('new_york', 2016)
View(Show.frame)
Show.frame <- GetFrame('chicago', 2015)
GetFrame <- function(city, year) {
path.now <- paste0('data', '/', city, '/' , 'airbnb-', year, '.csv')
show.frame <- read.csv(file = path.now, stringsAsFactors = FALSE)
return(show.frame)
}
Show.frame <- GetFrame('chicago', 2015)
show.frame[[1,5]]
show.frame[1,5]
library('shiny')
library('ggplot2')
library('dplyr')
library('tidyr')
library('maps')
library('stringr')
library('leaflet')
source('pre-processing.R')
show.frame[1,5]
Show.frame[1,5]
show.frame <- GetFrame('chicago', 2015)
Show.frame[1,5]
show.frame[1,5]
is.na(show.frame[1,5])
show.frame[1,5] == 'N/A'
?n
sum <- group_by(show.frame, overall_satisfaction) %>% summarise(n())
View(sum)
list <- (sum, show.frame)
list <- c(sum, show.frame)
View(list)
sum[1,2]
sum[[1,2]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summazise(show.frame, mean = mean(price))
library('shiny')
library('ggplot2')
library('dplyr')
library('tidyr')
library('maps')
library('stringr')
library('leaflet')
source('pre-processing.R')
summazise(show.frame, mean = mean(price))
?summazise
?summarise
summarise(show.frame, mean = mean(price))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
is.integer(show.frame[[1,8]])
show.frame[[1,8]]
is.string(show.frame[[1,8]])
is.character(show.frame[[1,8]])
typeof(show.frame[[1,8]])
ls<- [1:3]
ls<- c([1:3])
ls<- c(1:3)
ls
ls[2]
ls <- c(1:3, 0.5)
ls
runApp()
runApp()
runApp()
