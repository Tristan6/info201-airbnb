tas <- data.frame(names, math.grades, spanish.grades)
# Print a sentence "The TA data frame has X rows and Y cols: COL_NAMES", replacing X
# with the number of rows, Y with the number of columns, and COL_NAMES with a
# comma-separated list of the column names.
col.names <- colnames(tas)
col.list.names <- paste(col.names[1], ',', col.names[2], ',', col.names[3])
print(paste("The TA data frame has", nrow(tas), "rows and", ncol(tas),
"cols:", col.list.names))
# Print out the names of the columns, and rows names as well.
# Add a row name for each row which is the name of the TA
print(colnames(tas))    # print out column names.
row.names(tas)[1:6] = names       # Add row names for each row.
# Print out the row of the data frame with your TA's grades.
print(tas[2:3])
# Add a new column 'grade.diff' to 'tas' data frame, which has values equal to each TA's
# math grade minus the TA's Spanish grade.
tas$grade.diff = tas$math.grades - tas$spanish.grades
# Add column 'better.at.math' as a boolean (TRUE/FALSE) variable that indicates
# that a TA got a better grade in math.
tas$better.at.math = tas$grade.diff > 0
# Create a variable 'num.better.at.math' that is the count of how many TAs are better
# at math. Print out this variable.
num.better.at.math <- nrow(tas[tas$better.at.math == TRUE, ])
print(num.better.at.math)
# Write your tas data frame to a new .csv file inside 'data/' directory with the
# filename grade_data.csv without the Ta names in first column.
row.names(tas)[1:6] <- 1:6                     # first remove all the Ta'name in here.
write.csv(tas, file = "data/grade_data.csv")
#################
#### PART 2 #####
#################
# Read in the life_expectancy.csv file found in the data/ directory. Store it into a
# variable called 'life.expectancy'. Also use RStudio to View() it to learn about its
# rows and columns.
life.expectancy <- read.csv("data/life_expectancy.csv", stringsAsFactors = FALSE)
View(life.expectancy)
# Add a column called 'change' to the data frame that is the change in life expectancy
# from 1960 to 2013.
life.expectancy$change = life.expectancy$le_2013 - life.expectancy$le_1960
# Create a variable 'num.small.gain' that has the number of countries whose life
# expectancy has not improved by 5 years or more between 1960 and 2013. Print out this
# variable.
num.small.gain <- nrow(life.expectancy[life.expectancy$change < 5, ])
print(num.small.gain)
# Create a variable 'most.improved' that is the name of the country with the largest
# gain in life expectancy. Print out this variable.
most.improved <- life.expectancy[life.expectancy$change == max(life.expectancy$change), "country"]
print(most.improved)
# Define a function 'CountryChange' that takes in a country's name as an argument,
# and returns that country's change in life expectancy from 1960 to 2013 as number,
# assuming that the change column is in the frame.
CountryChange <- function(name.country) {
change.in.country <- life.expectancy[life.expectancy$country == name.country, "change"]
return(change.in.country)     # return the number of change for one country.
}
# Use 'CountryChange' function to print out the change in life expectancy from 1960 to
# 2013 in Haiti.
print(CountryChange('Haiti'))
# Define a function 'LowestLifeExpInRegion' that takes in a region as an argument, and
# returns the name of the country with the lowest life expectancy in 2013 (in that region).
LowestLifeExpInRegion <- function(region) {
match.region <- life.expectancy[life.expectancy$region == region, ]
match.name <- match.region[match.region$le_2013 == min(match.region$le_2013), 'country']
return(match.name)
}
# Use 'LowestLifeExpInRegion' to print out the country with the lowest life expectancy
# in 2013 in Latin America and the Caribbean.
print(LowestLifeExpInRegion('Latin America & Caribbean'))
# Define a function 'CompareCountries' that takes in two country names as arguments, and
# returns a data frame representing a table of those two country's life expectancies in
#2013 and the change since 1960.
CompareCountries <- function(country.one, country.two) {
table <- life.expectancy[life.expectancy$country == country.one | life.expectancy$country == country.two,
c('country', 'le_2013', 'change')]
return(table)
}
# Use 'CompareCountries' function to compare the life expectancy changes of the United
# States and Cuba, and store the data frame in a variable 'us.vs.cuba'.
us.vs.cuba <- CompareCountries('United States', 'Cuba')
#################
#### PART 3 #####
#################
# Load the Titanic data set built into R. Use RStudio to 'View()' it to learn about its
# rows and columns
View(Titanic)
# Use the 'is.data.frame()' function to confirm if this is data frame.
is.data.frame(Titanic)
# Cconvert the 'Titanic' variable into a data frame; use the data.frame() function.
Titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
# Create a variable 'children' that are the rows of the data frame with information
# about children on the Titanic.
children <- Titanic[Titanic$Age == 'Child', ]
# Create a variable 'children.num' that is the total number of children on the Titanic.
# Print this variable.
children.num <- sum(children$Freq)
print(children.num)
# Print the row in the overall Titanic data frame which has the largest absolute number
# of losses (people who did not survive).
# First create variable 'loss.people' which contain all rows of loss people, then print
# out the max number of people died.
loss.people <- Titanic[Titanic$Survived == 'No', ]
print(loss.people[loss.people$Freq == max(loss.people$Freq), ])
#7
# The class of this row tell me that the ship was evacuated based on class. It seems that
# people in the first class got evacuated the fastest and survised the trip the most.
# Women in the first class seem to have the highest survising rate. People in the third
# class were not so lucky for getting on the evacuated ships. They made up of the most
# dead in the data set.
# Define a function called SurvivalRate that takes in a ticket class as an argument.
# This function returns a sentence describing the survival rate of (adult)
# men vs. "women and children" in that ticketing class.
SurvivalRate <- function(class) {
# Create 'class.table' to get data frame of all people in the provided class.
class.table <- Titanic[Titanic$Class == class, ]
# Get adult men and women with children frame.
women.child.table <- class.table[class.table$Age == 'Child' | class.table$Sex == 'Female', ]
men.table <- class.table[class.table$Age != 'Child' & class.table$Sex == 'Male', ]
# From the men table, get the survival list 'yes and no', then get the sum of all people
# After that, we will get the percentage.
men.survival.yes <- men.table[men.table$Survived == 'Yes', ]
men.survival.no <- men.table[men.table$Survived == 'No', ]
total.men <- sum(men.survival.yes$Freq) + sum(men.survival.no$Freq)
percent.men.survival <- round(sum(men.survival.yes$Freq) / total.men * 100, 0)
# Do a similar process for women and children data frame.
wo.child.survival.yes <- women.child.table[women.child.table$Survived == 'Yes', ]
wo.child.survival.no <- women.child.table[women.child.table$Survived == 'No', ]
total.wo.child <- sum(wo.child.survival.yes$Freq) + sum(wo.child.survival.no$Freq)
percent.wo.chil.survival <- round(sum(wo.child.survival.yes$Freq) / total.wo.child * 100, 0)
# Create a string for returning to caller that print out the statement show how percent of
# adult men comparing to women and children.
str <- paste("Of the", class, "class,", percent.men.survival,
"% of men survived and", percent.wo.chil.survival,
"% of women and children survived.")
# Return to caller.
return(str)
}
# Call 'SurvivalRate()' function on each of the ticketing classes (1st, 2nd, and 3rd), printing
# out the results. Then in the Assignment.R file, add a comment that answers the following question
# in a few sentences:
print(SurvivalRate('1st'))
print(SurvivalRate('2nd'))
print(SurvivalRate('3rd'))
# From the data, it is clear that women and children were disproportionately across three class.
# Women and children from the 1st class has higher the survival rate of 97%; on the other hand
# women and children on the 3rd class only have 42%.So, class was a big factor in determining
# who live and who die.
install.packages("nycflights13")# load librarylibrary("nycflights13")# inspect the `flights` data frameView(head(flights))
# load library
library("nycflights13")
# inspect the `flights` data frame
View(head(flights))
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(head(flights))
colnames(head(flights))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
is.data.frame(head(flights))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
air.time <- select(head(flights), air.time)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library('dplyr')
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
air.time <- select(head(flights), air.time)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
air.time <- select(head(flights), air_time)
air.time
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
air.time <- arrange(air.time, -air_tiem)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
air.time <- arrange(air.time, -air_time)
air.time
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables and reload the library
# to "reset" it.
air.time <- arrange(select(head(flights), air_time), -air_time)
air.time
# Make a histogram of the amount of time gained using the `hist()` function
hist(air.time)
?hist
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
flights <- mutate(flights, gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
time.gained <- arrange(flights, -gained)
time.gained
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
flights <- mutate(flights, gained = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flight$gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gained)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean = mean(gained, na.rm =TRUE))
# Make a data.frame
students <- data.frame(
name = c('Mason', 'Tabi', 'Bryce', 'Ada', 'Bob','Filipe'),
section = c('a','a','a','b','b','b'),
math_exam1 = c(91, 82, 93, 100, 78, 91),
math_exam2 = c(88, 79, 77, 99, 88, 93),
spanish_exam1 = c(79, 88, 92, 83, 87, 77),
spanish_exam2 = c(99, 92, 92, 82, 85, 95))
# Calculate summary stats
summarize(students,
mean_math1 = mean(math_exam1),
mean_math2 = mean(math_exam2),
mean_math_scores=mean((math_exam1 + math_exam2) / 2))
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# What was the average department delay in each month?
# Save this as a data frame `dep.delay.by.month`
# Hint: you'll have to perform a grouping operation before summarizing your data
View(flights)
dep.delay.by.month <- group_by(flights, month) %>% summarize(average = average(dep_delay))
?average
??average
dep.delay.by.month <- group_by(flights, month) %>% summarize(average = sum(dep_delay) / nrow(month))
dep.delay.by.month <- group_by(flights, month) %>% summarize(average = mean(dep_delay))
dep.delay.by.month
# Which month had the greatest average departure delay?
num.max <- filter(dep.delay.by.month, max(average))
# Which month had the greatest average departure delay?
num.max <- filter(dep.delay.by.month, max(month))
dep.delay.by.month <- group_by(flights, month) %>% summarize(mean = mean(dep_delay))
dep.delay.by.month
# Which month had the greatest average departure delay?
num.max <- filter(filghts, max(month))
# Which month had the greatest average departure delay?
num.max <- filter(flights, max(month))
dep.delay.by.month <- group_by(flights, month) %>% summarize(mean = mean(dep_delay, na.rm = TRUE))
dep.delay.by.month
# Which month had the greatest average departure delay?
num.max <- filter(flights, max(month))
# Which month had the greatest average departure delay?
num.max <- filter(dep.delay.by.month, mean == max(mean))
num.max
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# Create a dataframe of the average arrival delay for each destination, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average delay?
View(airports)
arrival.delay <- select(flights, arr_delay, dest)
arrival.delay
left_join(airports, arrival.delay)
left_join(airports, arrival.delay, by = c('faa' = 'dest'))
airports
arrival.delay <- select(flights, arr_delay)
arrival.delay
install.packages('httr')
library('httr')
query.params <- list(q = "informatics")
GET("https://www.google.com/search", query = query.params)
install.packages('jsonlite')
library('jsonlite')
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library('httr')
library('dplyr')
library('jsonlite')
# Create a variable for the API's base URI (https://api.github.com)
git.base <- "http://api.github.com"
# Under the "Repositories" category, find the endpoint that will list repos in
# an organization
# Create a variable `resource` that represents the endpoint for the course
# organization (you can use `paste0()` to construct this, or enter it manually)
resource <- paste0('/repositories', '/org')
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
reponse <- GET(git.base, resource)
reponse
# Under the "Repositories" category, find the endpoint that will list repos in
# an organization
# Create a variable `resource` that represents the endpoint for the course
# organization (you can use `paste0()` to construct this, or enter it manually)
resource <- paste0('/repositories')
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
reponse <- GET(git.base, resource)
reponse
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
reponse <- GET(paste0(git.base, resource))
reponse
# Under the "Repositories" category, find the endpoint that will list repos in
# an organization
# Create a variable `resource` that represents the endpoint for the course
# organization (you can use `paste0()` to construct this, or enter it manually)
resource <- '/repositories'
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
reponse <- GET(paste0(git.base, resource))
install.packages('shiny')
library('shiny')
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
h1('Hello Shiny'),
textInput('user.name', label = 'What is your name')
)
my.server <- function(input, output) {
}
shinyApp(ui = my.ui, server = my.server)
runApp('C:/Users/Jimmy/infor201')
runApp('C:/Users/Jimmy/infor201')
runApp('C:/Users/Jimmy/infor201')
my.server <- function(input, output) {
output$greeting <- renderText({
my.message <- paste('Hello', input$user.name)
return(my.message)
})
}
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
h1('Hello Shiny'),
textInput('user.name', label = 'What is your name'),
textOutput('greeting')
)
my.server <- function(input, output) {
output$greeting <- renderText({
my.message <- paste('Hello', input$user.name)
return(my.message)
})
}
shinyApp(ui = my.ui, server = my.server)
# Install and load the `shiny` package
# install.packages("shiny")
library('shiny')
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
my.ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel('Cost Calculator'),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput('price', label = 'Price (in dollars', value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput('quantity', label = 'Quantity', value = 1, min = 1),
# The word "Cost", strongly bolded
strong('Cost'),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput('message')
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my.server <- function(input, output) {
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$message <- renderText({
calculation <- input$price * input$quantity
return(paste('$', calculation))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my.ui, server = my.server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='tran6388', token='05E2579C65CEED44E1345FF4A850EEAE', secret='KcNsS3dmCNzom1RcFnOpJZRmtPPj5v9dN+D1kNIE')
rsconnect::setAccountInfo(name='tran6388', token='05E2579C65CEED44E1345FF4A850EEAE', secret='KcNsS3dmCNzom1RcFnOpJZRmtPPj5v9dN+D1kNIE')
library('shiny')
install.packages('rsconnect')
library('rsconnect')
install.packages("rsconnect")
my.ui <- fluidPage(
h1('Hello Shiny'),
textInput('user.name', label = 'What is your name'),
textOutput('greeting')
)
my.server <- function(input, output) {
output$greeting <- renderText({
my.message <- paste('Hello', input$user.name)
return(my.message)
})
}
shinyApp(ui = my.ui, server = my.server)
world.map$CO2_emissions_(kt)
max(diamonds$price)
View(diamonds)
cars
is.data.frame(cars)
max(cars$dist)
ls
ls <- c(1:20)
ls
ls <- factor(ls)
ls
ls[1]
is.vector(ls)
ls[1]+1
ls <- c(1:20)
ls
lss <- cut(ls, breaks = c(0,5))
lss
lss <- cut(ls, breaks = c(0,5,10,20))
lss
lss[1]
is.vector(lss)
is.factor(lss)
is.vector(lss[1])
is.vector(lss[0:5])
lss[0:5]
lss
lss
ls <- table(lss)
ls
is.data.frame(ls)
is.vector(ls)
ls[1]
ls[2]
isClass(ls)
getClass(ls)
print(lss)
print(ls)
?table
ls <- data.frame(ls)
ls
library('shiny')
library('ggplot2')
library('dplyr')
library('tidyr')
library('maps')
library('stringr')
library('leaflet')
?HTML
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
library('shiny')
library('ggplot2')
library('dplyr')
library('tidyr')
library('maps')
library('stringr')
library('leaflet')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
runApp('C:/Users/Jimmy/infor201/info201-airbnb')
setwd("C:/Users/Jimmy/infor201/info201-airbnb")
GetFrame <- function(city, year) {
path.now <- paste0('./data', '/', city, '/' , year)
files <- list.files(path = path.now, pattern = '*airbnb')
num <- 2
show.frame <- read.csv(file = paste0(path.now, '/', files[1]), stringsAsFactors = FALSE)
while (num <= length(files)) {
now.frame <- read.csv(file = paste0(path.now, '/', files[num]), stringsAsFactors = FALSE)
show.frame <- rbind(show.frame, now.frame)
num <- num + 1
}
return(show.frame)
}
show.frame <- GetFrame('chicago', 2015)
View(show.frame)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?setView
runApp()
runApp()
runApp()
runApp()
?addCircles
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
